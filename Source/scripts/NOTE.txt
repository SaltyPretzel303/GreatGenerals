 !! To build and run project you will need java with a version >= 13 (java13+) !!

> TO BUILD:
cd to .../GreatGenerals/Source/
mvn clean install
// this will clean and build all projects listed in .../GreatGenerals/Source/pom.xml


> TO COMPILE: 
cd to .../GreatGenerals/Source/
mvn compile
// this will compile all projects listed in .../GreatGenerals/Source/pom.xml

// NOTE !!!
// not that usefull, in order to run the whole application every project
// has to be built/packaged in the jar (done with 'mvn install' or 'mvn package') 
// so that other projects can use it as dependency


> TO RUN:
1)	build projects with above command(s)


2)	$ cd .../GreatGeneras/Source/client-appliction
	$ mvn exec:java

	// ingore next instructions in this section (TO RUN section)
	// they were valid at some point but are not usefull anymore
	For java 11+
	cd to .../GreatGenerals/Source/client-application
	mvn javafx:run
		or 
	mvn exec:java

	for java 11-
	cd to .../GreatGenerals/Source/client-application
	java -cp ./target/client-application-0.0.1-SNAPSHOT-jar-with-dependencies.jar app.launcher.Launcher

! ATTENTION !
If after exiting (closing all windows) process don't exit (speaking about terminal)
it is possible that HttpClient is still keeping it's thread pool alive. This will 
for sure happen if you try to login but server is not running, exception will be thrown 
stating that server is not available, if you close window soon after that it will hang
because I guess that one (or more ... ) thread is still alive.
One solution would be creating custom thread pool (ExecutionService) and passing it 
to the httpClienBuilder and then shutting it down manually (the same thing is not 
possible with the default executor created by the httpClient). BUT for some reason
this doesn't work ... sooo ... 

-Dexec.cleanupDaemonThreads=false

adding this argument ^ to the cli while running the app 
(mvn exec:java -Dexec.cleanupDaemonThreads=false) 
will basically cleanup all remaining threads so ... yeah

https://stackoverflow.com/questions/65333866/java-httpclient-not-releasing-threads
https://stackoverflow.com/questions/51871635/couldnt-destroy-threadgroup-org-codehaus-mojo-exec-execjavamojoisolatedthreadg

> TO DEBUG (in visualStudioCode):
	$ cd to .../GreatGenerals/Sourece/client-application
	$ mvnDebug exec:java -Djavafx.run.jvmArguments=-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=8000

make sure that port 8000 is not in use if it is in use just pick some other
but don't forget to update launch.json as well 

in 'launch.json' add next config
{

    "type": "java",
    "name": "attach to mvnDebug",
    "request": "attach",
    "hostName": "localhost",
    "port": 8000
}

'launch.json' example:
{
	"version": "0.2.0",
	"configurations": [
		{
			"type": "java",
			"name": "Debug (Launch)-Launcher<client-application>",
			"request": "launch",
			"mainClass": "app.launcher.Launcher",
			"projectName": "client-application"
		},
		// next obj. is important for debugging 
	    {

			"type": "java",
			"name": "attach to mvnDebug",
			"request": "attach",
			"hostName": "localhost",
			"port": 8000
		  }
	]
}

in vsCode run > Debug: Select and Start Debugging
select 'attach to mvnDebug'

====================================================================================


> To launch rest login server (.../Source/server/rest-login/)
	(Not recommended since all backend stuff is now dockerized ... )
	$ cd .../Source/server/rest-login/
	$ mvn spring-boot:run

> To start "Backend" (docker and docker-compose are required)
	From project root (.../GreatGenerals/Source) run next commands: 

	1) Build/pull all required images
		$ docker-compose up --build --no-start 
	
	2) If no errors ocurred start broker service first: 
		$ docker start gg-broker 

	3) Wait few seconds (10-20 depending on your hardware) so that broker is 
		properly initialized, started and ready to receive connections. If you don't
		want to guess the time use the next command (from different terminal window)
		$ docker logs --follow gg-broker 
		and wait "Server startup complete; 3 plugins started" message.
	
	4) Start all other services: 
		$ docker-compose up gg-users-db gg-game-db gg-login-server gg-game-server

	


